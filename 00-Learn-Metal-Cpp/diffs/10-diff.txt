28a29,30
> #include <chrono>
> #include <time.h>
36a39,43
> static constexpr double kAutoCaptureTimeoutSecs = std::chrono::seconds(3).count();
> 
> auto start = std::chrono::system_clock::now();
> 
> extern "C" NS::String* NSTemporaryDirectory( void );
65a73,74
>         void triggerCapture();
>         static bool beginCapture;
84a94,95
>         bool _hasCaptured;
>         NS::String* _pTraceSaveFilePath;
176a188,200
>     // Capture Menu UI
>     NS::MenuItem* pCaptureMenuItem = NS::MenuItem::alloc()->init();
>     NS::Menu* pCaptureMenu = NS::Menu::alloc()->init( NS::String::string( "Capture", UTF8StringEncoding));
> 
>     SEL beginCaptureCb = NS::MenuItem::registerActionCallback("beginCapture", [](void*, SEL, const NS::Object*) {
>         Renderer::beginCapture = true;
>     });
> 
>     NS::MenuItem* pBeginCaptureItem = pCaptureMenu->addItem( NS::String::string( "Begin Capture", UTF8StringEncoding ), beginCaptureCb, NS::String::string( "c", UTF8StringEncoding ) );
>     pBeginCaptureItem->setKeyEquivalentModifierMask( NS::EventModifierFlagCommand );
> 
>     pCaptureMenuItem->setSubmenu( pCaptureMenu );
> 
178a203
>     pMainMenu->addItem( pCaptureMenuItem );
181a207
>     pCaptureMenuItem->release();
183a210
>     pCaptureMenu->release();
218c245
<     _pWindow->setTitle( NS::String::string( "09 - Compute to Render", NS::StringEncoding::UTF8StringEncoding ) );
---
>     _pWindow->setTitle( NS::String::string( "10 - Programmatic GPU Capture", NS::StringEncoding::UTF8StringEncoding ) );
346a374
> bool Renderer::beginCapture{false};
352a381
> , _hasCaptured(false)
691a721,759
> void Renderer::triggerCapture()
> {
>     bool success;
> 
>     MTL::CaptureManager* pCaptureManager = MTL::CaptureManager::sharedCaptureManager();
>     success = pCaptureManager->supportsDestination( MTL::CaptureDestinationGPUTraceDocument );
>     if ( !success )
>     {
>         __builtin_printf( "Capture support is not enabled\n");
>         assert( false );
>     }
> 
>     char filename[NAME_MAX];
>     std::time_t now;
>     std::time( &now );
>     std::strftime( filename, NAME_MAX, "capture-%H-%M-%S_%m-%d-%y.gputrace", std::localtime( &now ) );
> 
>     _pTraceSaveFilePath = NSTemporaryDirectory()->stringByAppendingString( NS::String::string( filename, NS::UTF8StringEncoding ) );
>     NS::URL *pURL = NS::URL::alloc()->initFileURLWithPath( _pTraceSaveFilePath );
> 
>     MTL::CaptureDescriptor* pCaptureDescriptor = MTL::CaptureDescriptor::alloc()->init();
> 
>     pCaptureDescriptor->setDestination( MTL::CaptureDestinationGPUTraceDocument );
>     pCaptureDescriptor->setOutputURL( pURL );
>     pCaptureDescriptor->setCaptureObject( _pDevice );
> 
>     NS::Error *pError = nullptr;
> 
>     success = pCaptureManager->startCapture( pCaptureDescriptor, &pError );
>     if ( !success )
>     {
>         __builtin_printf( "Failed to start capture: \"%s\" for file \"%s\"\n", pError->localizedDescription()->utf8String(),  _pTraceSaveFilePath->utf8String() );
>         assert( false );
>     }
> 
>     pURL->release();
>     pCaptureDescriptor->release();
> }
> 
723a792,796
>     if ( Renderer::beginCapture )
>     {
>         triggerCapture();
>     }
> 
824a898,921
>     if ( Renderer::beginCapture )
>     {
>         MTL::CaptureManager* pCaptureManager = MTL::CaptureManager::sharedCaptureManager();
>         pCaptureManager->stopCapture();
> 
>         NS::String* pOpenCmd = NS::MakeConstantString( "open " )->stringByAppendingString( _pTraceSaveFilePath );
>         system( pOpenCmd->utf8String() );
> 
>         Renderer::beginCapture = false;
>         _hasCaptured = true;
>     }
> 
>     // Automattically trigger a capture if person has not used UI to trigger one.
>     if ( !_hasCaptured )
>     {
>         auto end = std::chrono::system_clock::now();
>         auto diff = std::chrono::duration_cast<std::chrono::seconds>(end - start);
> 
>         if ( diff.count() > kAutoCaptureTimeoutSecs )
>         {
>             Renderer::beginCapture = true;
>         }
>     }
> 
