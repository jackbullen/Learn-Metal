34a35,36
> static constexpr uint32_t kTextureWidth = 128;
> static constexpr uint32_t kTextureHeight = 128;
57a60
>         void buildComputePipeline();
60a64
>         void generateMandelbrotTexture();
67a72
>         MTL::ComputePipelineState* _pComputePSO;
211c216
<     _pWindow->setTitle( NS::String::string( "07 - Texture Mapping", NS::StringEncoding::UTF8StringEncoding ) );
---
>     _pWindow->setTitle( NS::String::string( "08 - Compute Set", NS::StringEncoding::UTF8StringEncoding ) );
347a353
>     buildComputePipeline();
350a357
>     generateMandelbrotTexture();
369a377
>     _pComputePSO->release();
505a514,566
> void Renderer::buildComputePipeline()
> {
>     const char* kernelSrc = R"(
>         #include <metal_stdlib>
>         using namespace metal;
> 
>         kernel void mandelbrot_set(texture2d< half, access::write > tex [[texture(0)]],
>                                    uint2 index [[thread_position_in_grid]],
>                                    uint2 gridSize [[threads_per_grid]])
>         {
>             // Scale
>             float x0 = 2.0 * index.x / gridSize.x - 1.5;
>             float y0 = 2.0 * index.y / gridSize.y - 1.0;
> 
>             // Implement Mandelbrot set
>             float x = 0.0;
>             float y = 0.0;
>             uint iteration = 0;
>             uint max_iteration = 1000;
>             float xtmp = 0.0;
>             while(x * x + y * y <= 4 && iteration < max_iteration)
>             {
>                 xtmp = x * x - y * y + x0;
>                 y = 2 * x * y + y0;
>                 x = xtmp;
>                 iteration += 1;
>             }
> 
>             // Convert iteration result to colors
>             half color = (0.5 + 0.5 * cos(3.0 + iteration * 0.15));
>             tex.write(half4(color, color, color, 1.0), index, 0);
>         })";
>     NS::Error* pError = nullptr;
> 
>     MTL::Library* pComputeLibrary = _pDevice->newLibrary( NS::String::string(kernelSrc, NS::UTF8StringEncoding), nullptr, &pError );
>     if ( !pComputeLibrary )
>     {
>         __builtin_printf( "%s", pError->localizedDescription()->utf8String() );
>         assert(false);
>     }
> 
>     MTL::Function* pMandelbrotFn = pComputeLibrary->newFunction( NS::String::string("mandelbrot_set", NS::UTF8StringEncoding) );
>     _pComputePSO = _pDevice->newComputePipelineState( pMandelbrotFn, &pError );
>     if ( !_pComputePSO )
>     {
>         __builtin_printf( "%s", pError->localizedDescription()->utf8String() );
>         assert(false);
>     }
> 
>     pMandelbrotFn->release();
>     pComputeLibrary->release();
> }
> 
519,521d579
<     const uint32_t tw = 128;
<     const uint32_t th = 128;
< 
523,524c581,582
<     pTextureDesc->setWidth( tw );
<     pTextureDesc->setHeight( th );
---
>     pTextureDesc->setWidth( kTextureWidth );
>     pTextureDesc->setHeight( kTextureHeight );
528c586
<     pTextureDesc->setUsage( MTL::ResourceUsageSample | MTL::ResourceUsageRead );
---
>     pTextureDesc->setUsage( MTL::ResourceUsageSample | MTL::ResourceUsageRead | MTL::ResourceUsageWrite);
533,551d590
<     uint8_t* pTextureData = (uint8_t *)alloca( tw * th * 4 );
<     for ( size_t y = 0; y < th; ++y )
<     {
<         for ( size_t x = 0; x < tw; ++x )
<         {
<             bool isWhite = (x^y) & 0b1000000;
<             uint8_t c = isWhite ? 0xFF : 0xA;
< 
<             size_t i = y * tw + x;
< 
<             pTextureData[ i * 4 + 0 ] = c;
<             pTextureData[ i * 4 + 1 ] = c;
<             pTextureData[ i * 4 + 2 ] = c;
<             pTextureData[ i * 4 + 3 ] = 0xFF;
<         }
<     }
< 
<     _pTexture->replaceRegion( MTL::Region( 0, 0, 0, tw, th, 1 ), 0, pTextureData, tw * 4 );
< 
632a672,693
> void Renderer::generateMandelbrotTexture()
> {
>     MTL::CommandBuffer* pCommandBuffer = _pCommandQueue->commandBuffer();
>     assert(pCommandBuffer);
> 
>     MTL::ComputeCommandEncoder* pComputeEncoder = pCommandBuffer->computeCommandEncoder();
> 
>     pComputeEncoder->setComputePipelineState( _pComputePSO );
>     pComputeEncoder->setTexture( _pTexture, 0 );
> 
>     MTL::Size gridSize = MTL::Size( kTextureWidth, kTextureHeight, 1 );
> 
>     NS::UInteger threadGroupSize = _pComputePSO->maxTotalThreadsPerThreadgroup();
>     MTL::Size threadgroupSize( threadGroupSize, 1, 1 );
> 
>     pComputeEncoder->dispatchThreads( gridSize, threadgroupSize );
> 
>     pComputeEncoder->endEncoding();
> 
>     pCommandBuffer->commit();
> }
> 
