58a59
>         void buildTextures();
67a69
>         MTL::Texture* _pTexture;
209c211
<     _pWindow->setTitle( NS::String::string( "06 - Lighting", NS::StringEncoding::UTF8StringEncoding ) );
---
>     _pWindow->setTitle( NS::String::string( "07 - Texture Mapping", NS::StringEncoding::UTF8StringEncoding ) );
346a349
>     buildTextures();
353a357
>     _pTexture->release();
376a381
>         simd::float2 texcoord;
406a412
>             float2 texcoord;
412a419
>             float2 texcoord;
446a454,455
>             o.texcoord = vd.texcoord.xy;
> 
451c460
<         half4 fragment fragmentMain( v2f in [[stage_in]] )
---
>         half4 fragment fragmentMain( v2f in [[stage_in]], texture2d< half, access::sample > tex [[texture(0)]] )
452a462,464
>             constexpr sampler s( address::repeat, filter::linear );
>             half3 texel = tex.sample( s, in.texcoord ).rgb;
> 
457,458c469,472
<             float ndotl = saturate( dot( n, l ) );
<             return half4( in.color * 0.1 + in.color * ndotl, 1.0 );
---
>             half ndotl = half( saturate( dot( n, l ) ) );
> 
>             half3 illum = (in.color * texel * 0.1) + (in.color * texel * ndotl);
>             return half4( illum, 1.0 );
502a517,554
> void Renderer::buildTextures()
> {
>     const uint32_t tw = 128;
>     const uint32_t th = 128;
> 
>     MTL::TextureDescriptor* pTextureDesc = MTL::TextureDescriptor::alloc()->init();
>     pTextureDesc->setWidth( tw );
>     pTextureDesc->setHeight( th );
>     pTextureDesc->setPixelFormat( MTL::PixelFormatRGBA8Unorm );
>     pTextureDesc->setTextureType( MTL::TextureType2D );
>     pTextureDesc->setStorageMode( MTL::StorageModeManaged );
>     pTextureDesc->setUsage( MTL::ResourceUsageSample | MTL::ResourceUsageRead );
> 
>     MTL::Texture *pTexture = _pDevice->newTexture( pTextureDesc );
>     _pTexture = pTexture;
> 
>     uint8_t* pTextureData = (uint8_t *)alloca( tw * th * 4 );
>     for ( size_t y = 0; y < th; ++y )
>     {
>         for ( size_t x = 0; x < tw; ++x )
>         {
>             bool isWhite = (x^y) & 0b1000000;
>             uint8_t c = isWhite ? 0xFF : 0xA;
> 
>             size_t i = y * tw + x;
> 
>             pTextureData[ i * 4 + 0 ] = c;
>             pTextureData[ i * 4 + 1 ] = c;
>             pTextureData[ i * 4 + 2 ] = c;
>             pTextureData[ i * 4 + 3 ] = 0xFF;
>         }
>     }
> 
>     _pTexture->replaceRegion( MTL::Region( 0, 0, 0, tw, th, 1 ), 0, pTextureData, tw * 4 );
> 
>     pTextureDesc->release();
> }
> 
504a557
>     using simd::float2;
505a559
> 
509,538c563,593
<         //   Positions          Normals
<         { { -s, -s, +s }, { 0.f,  0.f,  1.f } },
<         { { +s, -s, +s }, { 0.f,  0.f,  1.f } },
<         { { +s, +s, +s }, { 0.f,  0.f,  1.f } },
<         { { -s, +s, +s }, { 0.f,  0.f,  1.f } },
< 
<         { { +s, -s, +s }, { 1.f,  0.f,  0.f } },
<         { { +s, -s, -s }, { 1.f,  0.f,  0.f } },
<         { { +s, +s, -s }, { 1.f,  0.f,  0.f } },
<         { { +s, +s, +s }, { 1.f,  0.f,  0.f } },
< 
<         { { +s, -s, -s }, { 0.f,  0.f, -1.f } },
<         { { -s, -s, -s }, { 0.f,  0.f, -1.f } },
<         { { -s, +s, -s }, { 0.f,  0.f, -1.f } },
<         { { +s, +s, -s }, { 0.f,  0.f, -1.f } },
< 
<         { { -s, -s, -s }, { -1.f, 0.f,  0.f } },
<         { { -s, -s, +s }, { -1.f, 0.f,  0.f } },
<         { { -s, +s, +s }, { -1.f, 0.f,  0.f } },
<         { { -s, +s, -s }, { -1.f, 0.f,  0.f } },
< 
<         { { -s, +s, +s }, { 0.f,  1.f,  0.f } },
<         { { +s, +s, +s }, { 0.f,  1.f,  0.f } },
<         { { +s, +s, -s }, { 0.f,  1.f,  0.f } },
<         { { -s, +s, -s }, { 0.f,  1.f,  0.f } },
< 
<         { { -s, -s, -s }, { 0.f, -1.f,  0.f } },
<         { { +s, -s, -s }, { 0.f, -1.f,  0.f } },
<         { { +s, -s, +s }, { 0.f, -1.f,  0.f } },
<         { { -s, -s, +s }, { 0.f, -1.f,  0.f } },
---
>         //                                         Texture
>         //   Positions           Normals         Coordinates
>         { { -s, -s, +s }, {  0.f,  0.f,  1.f }, { 0.f, 1.f } },
>         { { +s, -s, +s }, {  0.f,  0.f,  1.f }, { 1.f, 1.f } },
>         { { +s, +s, +s }, {  0.f,  0.f,  1.f }, { 1.f, 0.f } },
>         { { -s, +s, +s }, {  0.f,  0.f,  1.f }, { 0.f, 0.f } },
> 
>         { { +s, -s, +s }, {  1.f,  0.f,  0.f }, { 0.f, 1.f } },
>         { { +s, -s, -s }, {  1.f,  0.f,  0.f }, { 1.f, 1.f } },
>         { { +s, +s, -s }, {  1.f,  0.f,  0.f }, { 1.f, 0.f } },
>         { { +s, +s, +s }, {  1.f,  0.f,  0.f }, { 0.f, 0.f } },
> 
>         { { +s, -s, -s }, {  0.f,  0.f, -1.f }, { 0.f, 1.f } },
>         { { -s, -s, -s }, {  0.f,  0.f, -1.f }, { 1.f, 1.f } },
>         { { -s, +s, -s }, {  0.f,  0.f, -1.f }, { 1.f, 0.f } },
>         { { +s, +s, -s }, {  0.f,  0.f, -1.f }, { 0.f, 0.f } },
> 
>         { { -s, -s, -s }, { -1.f,  0.f,  0.f }, { 0.f, 1.f } },
>         { { -s, -s, +s }, { -1.f,  0.f,  0.f }, { 1.f, 1.f } },
>         { { -s, +s, +s }, { -1.f,  0.f,  0.f }, { 1.f, 0.f } },
>         { { -s, +s, -s }, { -1.f,  0.f,  0.f }, { 0.f, 0.f } },
> 
>         { { -s, +s, +s }, {  0.f,  1.f,  0.f }, { 0.f, 1.f } },
>         { { +s, +s, +s }, {  0.f,  1.f,  0.f }, { 1.f, 1.f } },
>         { { +s, +s, -s }, {  0.f,  1.f,  0.f }, { 1.f, 0.f } },
>         { { -s, +s, -s }, {  0.f,  1.f,  0.f }, { 0.f, 0.f } },
> 
>         { { -s, -s, -s }, {  0.f, -1.f,  0.f }, { 0.f, 1.f } },
>         { { +s, -s, -s }, {  0.f, -1.f,  0.f }, { 1.f, 1.f } },
>         { { +s, -s, +s }, {  0.f, -1.f,  0.f }, { 1.f, 0.f } },
>         { { -s, -s, +s }, {  0.f, -1.f,  0.f }, { 0.f, 0.f } }
598,599d652
<     // Update instance positions:
< 
669a723,724
>     pEnc->setFragmentTexture( _pTexture, /* index */ 0 );
> 
